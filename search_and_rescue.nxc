unsigned int result; // flag returned when handling files
byte fileHandle; // handle to the data file
short bytesWritten; // number of bytes written to the file
string fileHeader; // column header for data in the file
int fileNumber, filePart; // integers to split up data file names
string fileName; // name of the file
string strFileNumber; // file number e.g myDataFile 1, 2, 3
string strFilePart; // file part e.g. myDataFile1-1, 1-2, 1-3
string text; // string to be written to file i.e. data values
string write;
int calibrated_distance;
int running_right_us_avg, running_front_us_avg = 20;
long total_distance_cm;
long prev_tick;
long prev_deg = 0;
long cur_tick;


#define MOTOR OUT_B
#define FULL_SPEED 100
#define DEG_TO_RPM 166.6667 // converts degrees per millisecond to RPM
#define CM_PER_ROTATION 16
#define RIGHT_US IN_1
#define COMPASS IN_2
#define FRONT_US IN_3
#define BUMPER IN_4


float distance_msg() //returns the distance travelled, in cm, since the last time this method was called.
{
   long dt = CurrentTick() - prev_tick;
   long deg = MotorRotationCount(MOTOR) - prev_deg;
   float rpm = deg * DEG_TO_RPM / dt;
   prev_deg = MotorRotationCount(MOTOR);
   prev_tick = CurrentTick();

   float distance = rpm * CM_PER_ROTATION * dt/60000;

   return distance;
}

// Create and initialize a file
void InitWriteToFile() {
  fileNumber = 0;  // set first data file to be zero
  filePart = 0; // set first part of first data file to zero
  fileName = "sensor_data.csv" ; // name of data file
  result=CreateFile(fileName, 1024, fileHandle);
  // NXT Guide Section 9.100 pg. 1812 and Section 6.59.2.2 pg. 535
  // returns file handle (unsigned int)
  // check if the file already exists
  while (result==LDR_FILEEXISTS) // LDR_FILEEXISTS returns if file pre-exists
     {
      CloseFile(fileHandle);
      fileNumber = fileNumber + 1; // create new file if already exists
      fileName=NumToStr(fileNumber);
      fileName=StrCat("sensor_data" , fileName, ".csv");
      result=CreateFile(fileName, 1024, fileHandle);
      }
  // play a tone every time a file is created
  //PlayTone(TONE_B7, 5); Or, not
  fileHeader = "Orientation, CM, Current Tick" ; // header for myData file
  WriteLnString(fileHandle, fileHeader, bytesWritten);
  // NXT Guide Section 6.59.2.43 pg. 554
  // Write string and new line to a file
  // bytesWritten is an unsigned int.  Its value is # of bytes written
} // end InitWriteToFile

void WriteToFile(string strTempText) {
  // strTempText stores the text (i.e. ticks and motorRpm to be written to file
  // write string to file
  result=WriteLnString(fileHandle, strTempText, bytesWritten);
  // if the end of file is reached, close the file and create a new part
  if (result==LDR_EOFEXPECTED) // LDR_EOFEXPECTED is flagged when end-of-file
    { // close the current file
      CloseFile(fileHandle); // NXT Guide Section 6.59.2.1 pg. 535
    // Closes file associated with file handle
    // create the next file name
    filePart = filePart + 1;
    strFileNumber = NumToStr(fileNumber);
    strFilePart = NumToStr(filePart);
    fileName = StrCat("sensor_data" , strFileNumber,"-", strFilePart ,".csv");
    // delete the file if it exists
    DeleteFile(fileName); // NXT Guide Section 6.59.2.5 pg. 537
    // Delete the file specified by the string input
    // create a new file
    CreateFile(fileName, 1024, fileHandle);
    // play a tone every time a file is created
    PlayTone(TONE_B7, 5);
    WriteLnString(fileHandle, strTempText, bytesWritten);
    } // end if
} // end WriteToFile

// Close the file
void StopWriteToFile() {
  // close the file
  CloseFile(fileHandle);
} // end StopWriteToFile

float aggregate_compass_sense () { //Figure out which sort of variable IN_2 is so we can ask for it here
    SetSensorLowspeed(COMPASS);
    float compass_read;
    for (int x = 1; x <= 5; x++){
        compass_read += SensorHTCompass(COMPASS);
    }
    compass_read = compass_read/6;
    return compass_read;
  }

  int aggregate_ultrasonic_sense () { //Figure out which sort of variable IN_1 is so we can ask for it here
      SetSensorLowspeed(RIGHT_US);
      int us_read;
      for (int x = 1; x <= 5; x++){
          us_read += SensorUS(RIGHT_US);
          Wait(100);
      }
      us_read = us_read/5;
      return us_read;
  }


  task running_right_us_avg_task (){
    SetSensorLowspeed(RIGHT_US);


    while (true) {
      int avg;
        for (int x = 1; x <=8; x++){
          avg += SensorUS(RIGHT_US);
        }
        avg = avg/8;
        running_right_us_avg = avg;
      }
    }

    task running_front_us_avg_task (){
      SetSensorLowspeed(FRONT_US);
        while (true) {
          int avg;
          for (int x = 1; x <=8; x++){
            avg += SensorUS(FRONT_US);
            }
          avg = avg/8;
          running_front_us_avg = avg;
          }
        }

  void turn_right() {
    byte motors[] = {OUT_B,OUT_C};
    OnFwdSync(motors, 60, 55);
    Wait(485);
    Off(motors);
    OnFwd(motors, 60);
    Wait(1500);
    //Off(motors);
    //Wait(800);

  }

  void turn_left() {
    byte motors[] = {OUT_B,OUT_C};
    OnFwdSync(motors, 60, -55);
    Wait(485);
    Off(motors);
    OnFwd(motors, 60);
    Wait(750);
    Off(motors);
  }


  task drive () {
    byte motors[] = {OUT_B,OUT_C};
    int right_us_val = running_right_us_avg; //aggregate_ultrasonic_sense();
    int front_us_val = running_front_us_avg;

    while (total_distance_cm < 775) { //While loop to turn towards wall if it drifts away, and away from wall if it drifts close

      if (right_us_val < 50) {
          if (front_us_val > 40) {
            if (right_us_val < (calibrated_distance)) //(right_us_val > calibrated_distance + 2)
            {
             OnFwdSync(motors, 60, -4);
            } else {
              OnFwdSync(motors, 60, 4);
            }
            //Wait(250);
          } else {
            turn_left();
          }
        } else {
          turn_right();
        }
        right_us_val = running_right_us_avg;
        front_us_val = running_front_us_avg;
      }
        Off(motors);
        StopWriteToFile();
        StopAllTasks();
  }

  task write_and_display () {

       //byte motors[] = {OUT_B,OUT_C};
       long initial_tick = CurrentTick();
       InitWriteToFile();

       while (true) {
         int right_us_val = running_right_us_avg; //aggregate_ultrasonic_sense();
         int front_us_val = running_front_us_avg;

          total_distance_cm += distance_msg();

          string distance_val = NumToStr(total_distance_cm);

          float compass_read = aggregate_compass_sense();

          string compass_val = NumToStr(compass_read);

          cur_tick = CurrentTick() - initial_tick;

          string tick_val = NumToStr(cur_tick);
           // Concatenate the 2 strings into a single one.
           // Write resulting string to file. The text will end with a EOL
          text = StrCat(compass_val, " degrees," , distance_val, " cm," , tick_val, " ticks," );
          WriteToFile(text);
          TextOut(0, LCD_LINE1, "US Readings:");
          ClearLine(LCD_LINE2);
          NumOut(0,LCD_LINE2, right_us_val);
          NumOut(50, LCD_LINE2, front_us_val);
          TextOut(0,LCD_LINE3, "Compass Bearing:");
          ClearLine(LCD_LINE4);
          TextOut(0,LCD_LINE4, compass_val);
          TextOut(0,LCD_LINE5, "Ticks since start:");
          ClearLine(LCD_LINE6);
          TextOut(0,LCD_LINE6, tick_val);
          ClearLine(LCD_LINE7);
          TextOut(0,LCD_LINE7, "Total distance:");
          ClearLine(LCD_LINE8);
          NumOut(0,LCD_LINE8, total_distance_cm);
          Wait(2000);
       }
     }

     task calibrate_ultrasonic_sensor() {
       SetSensorLowspeed(RIGHT_US);
       TextOut(0, LCD_LINE2, "  Press  Center");
       TextOut(0, LCD_LINE3, "    Button To");
       TextOut(0, LCD_LINE4, "    Calibrate");

       until(ButtonPressed(BTNCENTER, true)) {Wait(10);}

       calibrated_distance = aggregate_ultrasonic_sense();
       running_right_us_avg = calibrated_distance;
       ClearScreen();
       TextOut(0, LCD_LINE2, "Calibrated value: ");
       NumOut(0, LCD_LINE3,calibrated_distance);
       TextOut(0, LCD_LINE6,"Press Center");
       TextOut(0, LCD_LINE7,"Button To Run");

       until(ButtonPressed(BTNCENTER, true)) {Wait(10);}

       ClearScreen();
       Precedes(write_and_display, drive);

     }

task main ()
  {
    Precedes(calibrate_ultrasonic_sensor,running_right_us_avg_task,
            running_front_us_avg_task); }
